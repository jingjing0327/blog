<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kotlin</title>
    <link href="/2022/04/11/kotlin/"/>
    <url>/2022/04/11/kotlin/</url>
    
    <content type="html"><![CDATA[<p>actual<br>also</p><p>it:<br>    如果回调只有一个参数，可以省略参数，代码里面直接些it</p><p>let:<br>    如果str不为null，就执行let{}里面的代码<br>    str?.let{<br>        it //todo<br>    }</p><p>!!.<br>    非空断言操作符</p><p>?:<br>空合并操作符，类似于java的三元运算，str?:”hehe”如果str为空，则str为hehe</p><p>apply：<br>    val file=File(“D://abc.txt”)<br>    file.setReadable(true)<br>    file.setWritable(true)<br>    file.setExecutable(false)</p><pre><code class="hljs">val file=File(&quot;D://abc.txt&quot;).apple&#123;    setReadable(true)    setWritable(true)    setExecutable(false)&#125;</code></pre><p>::<br>函数引用<br>    fun main(){<br>        showOnBoard(“yagao”,::getDiscount)<br>    }<br>    private fun getDiscount(goodsName:String,hour:Int):String{<br>        return “xxxxx”<br>    }<br>    private fun showOnBoard(goodsName:String,getDiscount:(String,Int)-&gt;String){<br>        print(“xxxx”)<br>    }</p><p>run<br>    返回bool<br>    “liqiong”.run{<br>        length&gt;10<br>    }</p><p>with<br>    返回bool<br>    with(“liqiong”){<br>        length&gt;10<br>    }</p><p>also<br>    跟let类似，不过also返回原始对象<br>    File(“D://xxx”)<br>        .also {<br>            it.setExecutable(false)<br>        }.also {<br>            it.setReadable(true)<br>        }.also{<br>            it.setWritable(true)<br>        }<br>takeIf<br>    参数是lambda表达式<br>    File(“d://xxx”).takeIf{it.exists() &amp;&amp; it.canRead()}?.readText()<br>    如果这个文件存在&amp;可读，就读取出来文件内容</p><p>takeUnless<br>    takeIf的反向操作</p><p>mutableListOf()<br>可变的List</p><p>setOf<br>set集合<br>mutableSetOf()</p><p>inArrayOf(10,20,30)</p><p>mapOf(“java” to 20,”python” to 90)</p><p>val xxx= mutableMapOf()<br>xxx+=”java” to 20</p><p>构造函数：</p><pre><code class="hljs">class Player(    _name: String = &quot;python&quot;,    _age: Int) &#123;    var name: String = _name        get() = field.plus(&quot;hehe&quot;)        set(value) &#123;            field = value.trim()        &#125;    val age = _age&#125;Player(_age = 3)</code></pre><p>次构造函数:<br>    class Player(<br>        _name: String = “python”,<br>        _age: Int<br>    ) {<br>        constructor(_name:String):this(name,_age=10）{<br>            this.name=name.plus(“oooo”)<br>        }<br>    }</p><p>init{}<br>初始代码块，在构造函数里面执行</p><p>lateinit 在属性上面，用的时候在初始化，不用不初始化</p><p>lazy:<br>    class Player2(_name: String) {<br>        var name = _name<br>        val config by lazy { loadConfig() }</p><pre><code class="hljs">    fun loadConfig(): String &#123;        return &quot;xxoo&quot;    &#125;&#125;</code></pre><p>open:<br>    关键字</p><p>companion object{<br>    fun load(){}<br>}<br>伴生类，类似java static 方法</p><p>数据类：<br>    data class  提供了toString、equals、hashCode 等方法</p><p>operator 组件函数:<br>    class PlayerScore(val experience:Int,var y:Int){<br>        operator fun component1() = experience<br>        operator fun component2() = y<br>    }</p><pre><code class="hljs">fun main()&#123;    val (x,y)=PlayerScore(10,20)    print(&quot;$x,$y&quot;)&#125;</code></pre><p>运算符重载<br>    operator plus ==&gt;&gt; +</p><p>密封类<br>    sealed class LicenseStatus{<br>        object UnLicense:LicenseStatus()<br>        object Learning:LicenseStatus()<br>        class Qualified(val licenseId:String):LicenseStatus()<br>    }<br>    class Driver(var status:LicenseStatus){<br>        fun checkLicense():String{<br>            return when(status){<br>                is LicenseStatus.UnLicense -&gt;”没资格”<br>                is LicenseStatus.Learning -&gt;”在学了”<br>                is LicenseStatus.Qualified -&gt; “有资格，编号为：${(this.status as LicenseStatus.Qualified).licenseId}”<br>            }<br>        }<br>    }<br>    fun main(){</p><pre><code class="hljs">&#125;泛型：    class MaginBox&lt;T&gt;(item:T)&#123;    &#125;    class Boy(val name:String,val age:Int)    class Dog(val width:Int)    fun main()&#123;        val box:maginBox&lt;Boy&gt; =MagicBox(Boy(&quot;xxx&quot;,12))        val box2:maginBox&lt;Dog&gt; =MagicBox(Dog(34))    &#125;    subjectModFunction泛型：    varage outout:    协变in:    逆变</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/11/hello-world/"/>
    <url>/2022/04/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
